#include "Rotation.h"
#include <math.h>
constexpr float MY_PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679f;
constexpr float ONE_DEGREE = 0.01745329251994329576923690768488612713442871888541725456097191440171009114603449443682241569634509482167f;
Matrix Rotation::rotX(double amount) {
	double x = ONE_DEGREE * amount;
	return Matrix(4, 4, {
		{1, 0     , 0	   , 0},
		{0, cos(x), -sin(x), 0},
		{0, sin(x), cos(x) , 0},
		{0, 0     , 0      , 1}
		});
}
Matrix Rotation::rotY(double amount) {
	double y = ONE_DEGREE * amount;
	return Matrix(4, 4, {
		{cos(y) , 0, sin(y), 0},
		{0      , 1, 0     , 0},
		{-sin(y), 0, cos(y), 0},
		{0      , 0, 0     , 1}
		});
}
Matrix Rotation::rotZ(double amount) {
	double z = ONE_DEGREE * amount;
	return Matrix(4, 4, {
		{cos(z), -sin(z), 0, 0},
		{sin(z), cos(z) , 0, 0},
		{0     , 0      , 1, 0},
		{0     , 0      , 0, 1}
		});
}
Mesh Rotation::rotMesh(Mesh mesh, Vector3 rotation, Vector3 center) {
	Matrix m;
	Matrix rotM = rotX(rotation.x) * rotY(rotation.y) * rotZ(rotation.z);
	std::vector<Vector3> temp(mesh.vertices.size());
	for (int i = 0; i < temp.size(); i++) {
		m = (Matrix)mesh.vertices[i];

		Matrix T = (Matrix)Vector3(-center.x, -center.y, -center.z);
		Matrix nT = (Matrix)center;
		m = m + T;
		m = rotM * m;
		m = m + nT;
		temp[i] = Vector3(m.m[0][0], m.m[1][0], m.m[2][0]);

	}

	return Mesh(temp, mesh.triangles);
}
#pragma once
#include "Matrix.h"
class Vector3
{
public:
	float x = 0.0f;
	float y = 0.0f;
	float z = 0.0f;
	Vector3(float nx, float ny, float nz);
	Vector3() = default;
	Vector3 operator + (const Vector3 &other) {
		return Vector3(x + other.x, y + other.y, z + other.z);
	}
	Vector3 operator - (const Vector3& other) {
		return Vector3(x - other.x, y - other.y, z - other.z);
	}
	Vector3 operator + (const float& other) {
		return Vector3(x + other, y + other, z + other);
	}
	Vector3 operator - (const float& other) {
		return Vector3(x - other, y - other, z - other);
	}
	Vector3 operator * (const float& other) {
		return Vector3(x * other, y * other, z * other);
	}
	Vector3 operator / (const float& other) {
		return Vector3(x / other, y / other, z / other);
	}
	Vector3 operator * (const Vector3& other) {
		return Vector3(x * other.x, y * other.y, z * other.z);
	}
	Vector3 operator / (const Vector3& other) {
		return Vector3(x / other.x, y / other.y, z / other.z);
	}
	Vector3 operator += (const Vector3& other) {
		return Vector3(x + other.x, y + other.y, z + other.z);
	}
	Vector3 operator -= (const Vector3& other) {
		return Vector3(x - other.x, y - other.y, z - other.z);
	}
	Vector3 operator += (const float& other) {
		return Vector3(x + other, y + other, z + other);
	}
	Vector3 operator -= (const float& other) {
		return Vector3(x - other, y - other, z - other);
	}
	Vector3 operator *= (const float& other) {
		return Vector3(x * other, y * other, z * other);
	}
	Vector3 operator /= (const float& other) {
		return Vector3(x / other, y / other, z / other);
	}
	Vector3 operator *= (const Vector3& other) {
		return Vector3(x * other.x, y * other.y, z * other.z);
	}
	Vector3 operator /= (const Vector3& other) {
		return Vector3(x / other.x, y / other.y, z / other.z);
	}
	operator Matrix() const {
		return Matrix(4, 1, { {x},{y},{z},{1} });
	}
};
#pragma once
#include "Vector3.h"
#include "Vector2.h"
#include "Mesh.h"
#include "Color.h"
#include "RenderObject.h"
#include "RenderEngine.h"
#include "Matrix.h"
#include "Rotation.h"
#include <Windows.h>
enum class WindowState {RUN, EXIT};

class MainWindow
{
public:
	MainWindow();
	~MainWindow();
	void run(HINSTANCE hInstance, int nShowCmd);
	void fatalError(LPCWSTR errorString);
	LPCWSTR _classname = L"WindowClass";
	LPCWSTR _windowname = L"Window";
	int _screenWidth;
	int _screenHeight;
	static int CoordsToBitMapIndex(Vector2 coords, int width, int height);
	static Vector2 BitMapIndexToCoords(int index, int width, int height);
	void plotLine(Vector2 p1, Vector2 p2, Color color);
	void plotTriangle(Vector2 p1, Vector2 p2, Vector2 p3, Color c, bool fill);
	
private:
	void initSystems(HINSTANCE hInstance, int nShowCmd);
	void mainLoop();
	void processInput();
	void drawScreen();
	void* memory;
	BITMAPINFO _bitmapInfo;
	static LRESULT CALLBACK WndProc(HWND window, UINT message, WPARAM wParam, LPARAM lParam);
	WNDCLASS _windowclass;
	HWND _window;
	WindowState _windowState;
	Mesh _mesh;
	Color color;
	RenderObject _ro;
};
#pragma once
#include "Matrix.h"
#include "Mesh.h"
#include "Vector3.h"
#include <vector>
class Rotation
{
public:
	static Matrix rotX(double amount);
	static Matrix rotY(double amount);
	static Matrix rotZ(double amount);
	static Mesh rotMesh(Mesh mesh, Vector3 rotation , Vector3 center);
};
#define UNICODE
#define _UNICODE

#include <fcntl.h>
#include <io.h>
#include "MainWindow.h"
#include <iostream>
#include <sstream>
#include <cstdint>
#include <list>
#include <wingdi.h>
#include <iomanip>

MainWindow* mW;

void MainWindow::fatalError(LPCWSTR errorString) {
    MessageBox(NULL, errorString, L"Fatal Error", MB_OK);
}
int MainWindow::CoordsToBitMapIndex(Vector2 coords, int width, int height) {
    if (coords.x > width || coords.y > height) { return 0; }
    int index = coords.y * width + coords.x;
    return index;
}
Vector2 MainWindow::BitMapIndexToCoords(int index, int width, int height) {
    Vector2 coords = Vector2(0,0);
    if (index > width * height || width == 0 || height == 0) { return coords; }
    coords.y = floor(index / width);
    coords.x = floor(index % width);
}
LRESULT CALLBACK MainWindow::WndProc(HWND window, UINT message, WPARAM wParam, LPARAM lParam) {
    LRESULT result;
    switch (message) {
    case WM_CLOSE:
    {
        mW->_windowState = WindowState::EXIT;
        return 0;
    }
    case WM_EXITSIZEMOVE:
    {
        mW->drawScreen();
        return 0;
    }
    case WM_SIZING: {
        RECT* rect = (RECT*)lParam;
        int width = rect->right - rect->left;
        int height = rect->bottom - rect->top;
        if (width < 600) {rect->right = rect->left + 600;}
        if (height < 400) {rect->bottom = rect->top + 400;}
        return 0;
    }
    default:
    {
        result = DefWindowProc(window, message, wParam, lParam);
    }
    }
    return result;
}
MainWindow::MainWindow() 
{
	_screenWidth = 1688;
	_screenHeight = 1050;
	_windowState = WindowState::RUN;
	_mesh = Mesh(std::vector<Vector3> {
		Vector3(200, 100, 200),
		Vector3(200, 100, 100),
		Vector3(200, 200, 100),
		Vector3(200, 200, 200),
		Vector3(100, 100, 200),
		Vector3(100, 100, 100),
		Vector3(100, 200, 100),
		Vector3(100, 200, 200)
	},
	std::vector<int>
	{
		4, 0, 3, 4, 3, 7, 0, 1, 2, 0, 2, 3, 1, 5, 6, 1, 6, 2, 5, 4, 7, 5, 7, 6, 7, 3, 2, 7, 2, 6, 0, 5, 1, 0, 4, 5
	});
	color = Color(ColorMode::RGB1, 0.5, 0.5, 0.5);
}
MainWindow::~MainWindow() 
{
}

void MainWindow::run(HINSTANCE hInstance, int nShowCmd)
{
    mW = this;
	initSystems(hInstance, nShowCmd);
	mainLoop();
}

void MainWindow::initSystems(HINSTANCE hInstance, int nShowCmd)
{
    _windowclass.lpfnWndProc = &MainWindow::WndProc;
    _windowclass.hInstance = hInstance;
    _windowclass.lpszClassName = _classname;
    if (!RegisterClass(&_windowclass)) { fatalError(L"Failed to register the window class"); }
    _window = CreateWindowEx(
        0,
        _classname,
        _windowname,
        WS_OVERLAPPEDWINDOW | WS_VISIBLE,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        0,
        0,
        hInstance,
        0
    );
    if (!_window) {
       fatalError(L"Failed to Create Window."); 
    }
    //AllocConsole();
    //FILE* fDummy;
    //freopen_s(&fDummy, "CONOUT$", "w", stdout);
}
void MainWindow::mainLoop()
{
    drawScreen();
    HDC hdc = GetDC(_window);
    while (_windowState != WindowState::EXIT)
    {
        drawScreen();
        processInput();
        StretchDIBits(
            hdc,
            0,
            0,
            _screenWidth,
            _screenHeight,
            0,
            0,
            _screenWidth,
            _screenHeight,
            memory,
            &_bitmapInfo,
            DIB_RGB_COLORS,
            SRCCOPY
        );

    }

    ReleaseDC(_window, hdc);

}

void MainWindow::processInput() {
    MSG msg;
    while (PeekMessage(&msg, _window, 0, 0, PM_REMOVE)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
}

void MainWindow::drawScreen(){
    if (memory != nullptr)
    {
        VirtualFree(memory, 0, MEM_RELEASE);
    }
    RECT rect;
    GetClientRect(_window, &rect);
    _screenWidth = rect.right - rect.left;
    _screenHeight = rect.bottom - rect.top;
    memory = VirtualAlloc(0,
        _screenWidth * _screenHeight * 4,
        MEM_RESERVE | MEM_COMMIT,
        PAGE_READWRITE
    );
    _mesh = Rotation::rotMesh(_mesh, Vector3(0.1,0.1,0.1), Mesh::calculateCenter(_mesh));
    std::vector<RenderObject> ros = RenderEngine::ConvertMeshToRenderObjects(_mesh, _screenWidth, _screenHeight);

    for (RenderObject ro : ros) {
        plotTriangle(ro.coordinates[0], ro.coordinates[1], ro.coordinates[2], Color(ColorMode::RGB1,255,0,0), false);
    }
    _bitmapInfo.bmiHeader.biSize = sizeof(_bitmapInfo.bmiHeader);
    _bitmapInfo.bmiHeader.biWidth = _screenWidth;
    _bitmapInfo.bmiHeader.biHeight = _screenHeight;
    _bitmapInfo.bmiHeader.biPlanes = 1;
    _bitmapInfo.bmiHeader.biBitCount = 32;
    _bitmapInfo.bmiHeader.biCompression = BI_RGB;
}
void MainWindow::plotLine(Vector2 p1, Vector2 p2, Color color) {
    std::uint32_t* pixel = (std::uint32_t*)memory;
    if (!pixel) {
        return;
    }
    int x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;
    if (x1 < 0) x1 = 0;
    if (x1 >= _screenWidth) x1 = _screenWidth - 1;
    if (y1 < 0) y1 = 0;
    if (y1 >= _screenHeight) y1 = _screenHeight - 1;
    if (x2 < 0) x2 = 0;
    if (x2 >= _screenWidth) x2 = _screenWidth - 1;
    if (y2 < 0) y2 = 0;
    if (y2 >= _screenHeight) y2 = _screenHeight - 1;
    int dx = abs(x2 - x1), dy = abs(y2 - y1);
    int sx = x1 < x2 ? 1 : -1, sy = y1 < y2 ? 1 : -1;
    int err = dx - dy;
    while (true) {
        Vector2 coords = Vector2(x1, y1);
        int index = CoordsToBitMapIndex(coords, _screenWidth, _screenHeight);
        float intensity = abs(err - dx + dy) / (float)(dx + dy);
        pixel[index] = Color::colorClassToHex(color);
        if (x1 == x2 && y1 == y2) { break; };
        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y1 += sy;
        }
    }
}
void MainWindow::plotTriangle(Vector2 p1, Vector2 p2, Vector2 p3, Color c, bool fill) {
    plotLine(p1, p2, c);
    plotLine(p2, p3, c);
    plotLine(p3, p1, c);
}

    #include "RenderEngine.h"
    void RenderEngine::AddToRenderQueue(RenderObject object) {
	    renderQueue.push_back(object);
    }
    void RenderEngine::AddListToRenderQueue(std::vector<RenderObject> objects) {
	    renderQueue.insert(std::end(renderQueue), std::begin(objects), std::end(objects));;
    }
    std::vector<RenderObject> RenderEngine::ConvertMeshToRenderObjects(Mesh mesh, float windowWidth, float windowHeight) {
        std::vector<RenderObject> arr;
        for (int i = 0; i < size(mesh.triangles); i += 3)
        {
            float aspectRatio = windowWidth / windowHeight;
            float n = 0.1;
            float f = 100.0;
            float l = -aspectRatio;
            float r = aspectRatio;
            float b = -1.0;
            float t = 1.0;
            RenderObject ro;
            for (int c = 0; c < 3; c++)
            {
                ro.coordinates.push_back(Vector2(mesh.vertices[mesh.triangles[i + c]].x, mesh.vertices[mesh.triangles[i + c]].y));
            }
            arr.push_back(ro);
        }
        return arr;
    }
    #pragma once
#include "RenderObject.h"
#include "Mesh.h"
#include <vector>

class MainWindow;

class RenderEngine
{
public:
	std::vector<RenderObject> renderQueue;
	void AddToRenderQueue(RenderObject object);
	void AddListToRenderQueue(std::vector<RenderObject> objects);
	static std::vector<RenderObject> ConvertMeshToRenderObjects(Mesh mesh, float windowWidth, float windowHeight);
};
#include "Matrix.h"

Matrix::Matrix(int nsx, int nsy, double default_value) : sx(nsx), sy(nsy)
{
	m = std::vector<std::vector<double>>(nsx, std::vector<double>(sy, default_value));
}

Matrix::Matrix(int nsx, int nsy, std::vector<std::vector<double>> default_value) : sx(nsx), sy(nsy), m(default_value) {}
#pragma once
#include <vector>
#include <iostream>
class Matrix
{
public:
	std::vector<std::vector<double>> m;
	Matrix(int nsx, int nsy, double default_value);
	Matrix(int nsx, int nsy, std::vector<std::vector<double>> default_value);
	Matrix() = default;
	int sx;
	int sy;
	static Matrix im(int s) {
		Matrix temp(s, s, 0);
		for (int x = 0; x < s; x++) {
			temp.m[x][x] = 1;
		}
		return temp;
	}
	Matrix operator + (const Matrix& other) {
		if (other.sx != sx || other.sy != sy) {
			return Matrix(sx, sy, 0);
		}
		else {
			std::vector<std::vector<double>> temp = m;
			for (int r = 0; r < sx; r++) {
				for (int v = 0; v < sy; v++) {
					temp[r][v] = m[r][v] + other.m[r][v];
				}
			}
			return Matrix(sx, sy, temp);
		}
	}
	Matrix operator * (const Matrix& other) {
		if (sy != other.sx) {
			return Matrix(sx, sy, 0);
		}

		std::vector<std::vector<double>> result(sx, std::vector<double>(other.sy, 0));
		for (int x = 0; x < sx; x++) {
			for (int y = 0; y < other.sy; y++) {
				for (int r = 0; r < sy; r++) {

					result[x][y] += m[x][r] * other.m[r][y];		

				}
			}
		}
		return Matrix(sx, other.sy, result);
	}
};
#pragma once
#include <string>
#include <cstdint>
#include <fcntl.h>
enum ColorMode { RGB1, RGB255, HSV };
class Color
{
public:
	float rh;
	float gs;
	float bv;
	ColorMode colorMode;
	Color operator = (const Color& alt) {
		return alt;
	}
	static uint32_t rgbToHex(int r, int g, int b);
	static uint32_t colorClassToHex(Color c);
	static Color interpolate(Color c1, Color c2, float intensity);
	Color(ColorMode colorMode, float nrh, float ngs, float nbv);
	Color() = default;
};
#include "Color.h"
#include <string>
#include <cmath>
#include <sstream>
#include "MainWindow.h"
Color::Color(ColorMode ncolorMode, float nrh, float ngs, float nbv) {
	colorMode = ncolorMode;
	rh = nrh;
	gs = ngs;
	bv = nbv;
}
uint32_t Color::rgbToHex(int r, int g, int b)
{
	return r * 65536 + g * 256 + b;
}
uint32_t Color::colorClassToHex(Color c)
{
	return c.rh * 65536 + c.gs * 256 + c.bv;
}
Color Color::interpolate(Color c1, Color c2, float intensity) {
	return Color(ColorMode::RGB1, c1.rh + intensity * (c2.rh - c1.rh), c1.gs + intensity * (c2.gs - c1.gs), c1.bv + intensity * (c2.bv - c1.bv));
}
#include "Vector2.h"
Vector2::Vector2(float nx, float ny) : x(nx), y(ny) {}
pragma once
#include "Matrix.h"
class Vector2
{
public:
	float x = 0.0f;
	float y = 0.0f;
	Vector2(float nx, float ny);
	Vector2() = default;
	Vector2 operator + (const Vector2 &other) {
		return Vector2(x + other.x, y + other.y);
	}
	Vector2 operator - (const Vector2& other) {
		return Vector2(x - other.x, y - other.y);
	}
	Vector2 operator + (const float& other) {
		return Vector2(x + other, y + other);
	}
	Vector2 operator - (const float& other) {
		return Vector2(x - other, y - other);
	}
	Vector2 operator * (const float& other) {
		return Vector2(x * other, y * other);
	}
	Vector2 operator / (const float& other) {
		return Vector2(x / other, y / other);
	}
	Vector2 operator * (const Vector2& other) {
		return Vector2(x * other.x, y * other.y);
	}
	Vector2 operator / (const Vector2& other) {
		return Vector2(x / other.x, y / other.y);
	}
	Vector2 operator += (const Vector2& other) {
		return Vector2(x + other.x, y + other.y);
	}
	Vector2 operator -= (const Vector2& other) {
		return Vector2(x - other.x, y - other.y);
	}
	Vector2 operator += (const float& other) {
		return Vector2(x + other, y + other);
	}
	Vector2 operator -= (const float& other) {
		return Vector2(x - other, y - other);
	}
	Vector2 operator *= (const float& other) {
		return Vector2(x * other, y * other);
	}
	Vector2 operator /= (const float& other) {
		return Vector2(x / other, y / other);
	}
	Vector2 operator *= (const Vector2& other) {
		return Vector2(x * other.x, y * other.y);
	}
	Vector2 operator /= (const Vector2& other) {
		return Vector2(x / other.x, y / other.y);
	}
	operator Matrix() const {
		return Matrix(1, 2, { {x},{y} });
	}
};
#pragma once
#include "Color.h"
#include "Vector2.h" 
#include "Vector3.h" 
#include <vector>
class RenderObject
{
public:
	Color c;
	std::vector<Vector2> coordinates;
	RenderObject(Color nc, std::vector<Vector2>);
	RenderObject() = default;
};
#include "RenderObject.h"
RenderObject::RenderObject(Color nc, std::vector<Vector2> ncoordinates) {
	c = nc;
	coordinates.push_back(ncoordinates[0]);
	coordinates.push_back(ncoordinates[1]);
	coordinates.push_back(ncoordinates[2]);
	//normal = Vector3(
		//(U.y * V.z) - (U.z * V.y),
		//(U.z * V.x) - (U.x * V.z),
		//(U.x * V.y) - (U.y * V.x)
	//);
}
#include "Mesh.h"
#include <algorithm>
Mesh::Mesh(std::vector<Vector3> nvertices, std::vector<int> ntriangles) {
	if (size(nvertices) >= 3) {
		vertices = nvertices;
	}
	if (size(ntriangles) % 3 == 0) {
		triangles = ntriangles;
	}
}
Vector3 Mesh::calculateCenter(Mesh mesh) {
    std::vector<float> xValues, yValues, zValues;
    for (int i = 0; i < mesh.vertices.size(); i++) {
        xValues.push_back(mesh.vertices[i].x);
        yValues.push_back(mesh.vertices[i].y);
        zValues.push_back(mesh.vertices[i].z);
    }
    std::sort(xValues.begin(), xValues.end());
    std::sort(yValues.begin(), yValues.end());
    std::sort(zValues.begin(), zValues.end());

    int middle = mesh.vertices.size() / 2;
    return Vector3(xValues[middle], yValues[middle], zValues[middle]);
}
#pragma once
#include "Vector3.h"
#include <vector>
class Mesh
{
public:
	std::vector<Vector3> vertices;
	std::vector<int> triangles;
	static Vector3 calculateCenter(Mesh mesh);
	Mesh(std::vector<Vector3> nvertices, std::vector<int> ntriangles);
	Mesh() = default;
};
#include "mainWindow.h"
#include <windows.h>
#include <WinBase.h>

int WINAPI WinMain(_In_ HINSTANCE hInstance,_In_opt_ HINSTANCE hPrevInstance,_In_ LPSTR lpCmdLine,_In_ int nShowCmd)
{
    static MainWindow mainWindow;
    mainWindow._classname = L"WindowClass";
    mainWindow._windowname = L"Window";
    mainWindow.run(hInstance, nShowCmd);
    return 0;
}